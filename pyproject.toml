[tool.poetry]
name = "nebus_test"
version = "0.1.0"
authors = []


[tool.poetry.dependencies]
python = "~3.12"
fastapi = "0.104.1"
dishka = "^1.4.2"
alembic = "^1.14.1"
asyncpg = "^0.30.0"
psycopg2-binary = "^2.9.10"
sqlalchemy = "^2.0.37"
uvicorn = "^0.34.0"
pydantic = {extras = ["dotenv", "email"], version = "2.9.2"}
pydantic-settings = "^2.5.2"
python-json-logger = "2.0.7"
sqlalchemy-utils = "^0.41.2"
geoalchemy2 = "^0.17.0"
geometry = "^0.0.23"


[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"


[tool.poetry.group.dev.dependencies]
isort = "^5.13.2"
ruff = "^0.6.2"
black = "^24.8.0"


[tool.ruff]
target-version = "py310"
line-length = 110

[tool.ruff.lint]
select = [
    "ALL"
]
allowed-confusables = ["с", "С", "В", "е", "Н"]
exclude = [
    ".git",
    "__pycache__",
    ".venv",
    ".env",
    "env",
    "dist",
    "build",
    "docs",
    "benchmarks",
]
ignore = [
    "A003", # Python builtin is shadowed by class attribute {name} from {row}
    "B008", # Do not perform function call {name} in argument defaults
    "D100", # Missing docstring in public module
    "D101", # Missing docstring in public class
    "D102", # Missing docstring in public method
    "D103", # Missing docstring in public function
    "D104", # Missing docstring in public package
    "D105", # Missing docstring in magic method
    "D107", # Missing docstring in `__init__`
    "B024", # `Recognizer` is an abstract base class, but it has no abstract methods
    "B027", # `PushNotifier.send` is an empty method in an abstract base class, but has no abstract decorator
    "S101", # Use of `assert` detected
    "ANN101", # Missing type annotation for `self` in method
    "ANN102", # Missing type annotation for `cls` in classmethod
    "PTH123", # `open("foo")` should be replaced by `Path("foo").open()`
    "RET504", # Unnecessary variable assignment before `return` statement
    "TRY003", # Avoid specifying long messages outside the exception class
    "EM102", # Exception must not use an f-string literal, assign to variable first
    "N999", # Invalid module name
    "TCH003", # Move standard library import `uuid.UUID` into a type-checking block
    "PGH003", # Use specific rule codes when ignoring type issues
    "PGH004", # Use specific rule codes when using `noqa`
    "SIM108", # Use ternary operator `address_id = body["address_id"] if lesson.category == CategoryEnum.B else slot.instructor.address_id` instead of if-else-block
    "ARG005", # Unused lambda argument: `x`
    "ANN401", # Dynamically typed expressions (typing.Any) are disallowed in `f`
    "FBT001", # Boolean positional arg in function definition
    "FBT002", # Boolean default value in function definition
    "TD002", # Missing author in TODO; try: `# TODO(<author_name>): ...` or `# TODO @<author_name>: ...`
    "TD003", # Missing issue link on the line following this TODO
    "FIX002", # Line contains TODO, consider resolving the issue
    "EM101", # Exception must not use a string literal, assign to variable first
    "ARG001", # Unused function argument: `code`
    "ARG002", # Unused method argument: `now`
    "ISC001", # Implicitly concatenated string literals on one line
     #"COM812", # Explicitly concatenated string should be implicitly concatenated
    "D106", # Missing docstring in public nested class
    "D400", # First line should end with a period
    "D200", # One-line docstring should fit on one line with quotes
    "D205", # 1 blank line required between summary line and description
    "RUF002", # ambiguous-unicode-character-docstring
    "ERA001", # Found commented-out code TODO: Remove
    "G004", # F string for logs
]

[tool.ruff.lint.per-file-ignores]
"**/__init__.py" = ["F401"]

[tool.ruff.lint.pydocstyle]
convention = "pep257"

[tool.ruff.lint.pylint]
max-args = 12
max-statements = 65

[tool.isort]
line_length = 110
multi_line_output = 3
length_sort = true
include_trailing_comma = true
combine_as_imports = true
remove_redundant_aliases = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true
skip_glob = ["**/migrations/*",]

[tool.black]
line-length = 110
